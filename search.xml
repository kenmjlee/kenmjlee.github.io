<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在加拿大发简历多久会有反馈？</title>
      <link href="/04-08-2023/how-long-will-you-receive-feedback/"/>
      <url>/04-08-2023/how-long-will-you-receive-feedback/</url>
      
        <content type="html"><![CDATA[<p>申请工作，在发出简历后石沉大海是常见的事。加拿大到底有没有空挂职位（就是只发布但纯粹不请人）的情况？到底简历发出后之久会反馈？</p><p>首先，大家可以放心的是绝大多数情况下是没有空挂职位的。Recruiter 也是人，也要上班下班，天天收没用的简历还妨碍工作。所以一般职位放出后会有提交资料的限期，时间到了就会交闭。另一种就是 recruiter 收够了资料（毕竟看简历也是要时间的，不是越多越好）又或者已经有合适的候选人就会关闭。所以只要看到有 openings，放心的申请。</p><p>多久才有反馈是一件很玄学的事，有些公司可能对 talent acquisition  规定，不合适就直接拒绝。我有见过最短一天就被拒绝了，有可能是 AI也可能是 TA 看到拒绝的。如果是遇到一周以内的变更了状态，大家可以留个心眼准备准备。</p><p>当然也会有公司不去改变状态的，如果超过一个月，除非是公务员的职位，那么也不要去等了，多数是没戏了。为什么这样说呢？以下是我朋友的情况，从时间来看，一般合资格的候选人大约需要一个月时间就会收到 screening 或面试：</p><h3 id="公司-A"><a href="#公司-A" class="headerlink" title="公司 A"></a>公司 A</h3><ul><li>01-12 提交申请</li><li>01-25 收到 Screening，没有然后了</li></ul><h3 id="公司-B"><a href="#公司-B" class="headerlink" title="公司 B"></a>公司 B</h3><ul><li>01-17 提交申请</li><li>01-20 变了状态</li><li>01-31 收到 email 约面试</li><li>02-13 面试，说周五 17 号会有结果 </li><li>02-17 就没有然后了</li></ul><h3 id="公司-C"><a href="#公司-C" class="headerlink" title="公司 C"></a>公司 C</h3><ul><li>02-23 提交的申请</li><li>03-02 变了状态</li><li>03-23 收到了 Screening，说周五即 25 号会再次联络</li><li>03-28 收到 Confirm 约面试</li><li>03-30 面试一小时，说下周三会有结果；同日晚上，错失了 TA 的电话，回复时已经下班了</li><li>03-31 给了 Oral Offer，并开始进入背调</li><li>04-02 提交背调人的资料</li><li>04-06 早上看到状态变成 Interview 变成 Offer In Process</li><li>04-06 接近中午收到电话确认要发出 Offer 了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canada </tag>
            
            <tag> Life </tag>
            
            <tag> Career </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在安省考取驾照</title>
      <link href="/02-18-2022/get-driver-license-in-ontario/"/>
      <url>/02-18-2022/get-driver-license-in-ontario/</url>
      
        <content type="html"><![CDATA[<h2 id="驾照的分类"><a href="#驾照的分类" class="headerlink" title="驾照的分类"></a>驾照的分类</h2><p>在安省，普通驾照分为三个等级：G1、G2 和 G。</p><p>G1是一项常规的笔试，包括40道题，分为两部分。第一部分涉及交通标志，而第二部分则涉及交通规则。每个部分都是独立计分，最多只能错4题。</p><p>G2考查在城市驾驶的水平，主要涉及路线变更、转弯、小区停车和调头，以及对各种标志的应对。停车测试与中国的标准有所不同，它一般在小区实地进行，涵盖了靠边停车（pull over）、上&#x2F;下坡停车（up&#x2F;down hill parking）、平行停车（parallel parking）和3点调头（3-point turn）等项目。</p><p>对于有国外驾驶经验的司机，他们可以出示相关证明以免去G2考试，直接跳至G。但是如果在G考试中不及格，只能重新参加 G2考试（我不建议跳过 G2，因为即使在某个小镇通过了 G 考试，没有养成良好的驾驶习惯仍然是很危险的）。</p><p>通过 G2 考试后，等待一年就可以参加 G 考试。这是因为参加 G 考试的前提是必须具备高速公路驾驶经验并累积一定的里程数。G 考试的内容基于 G2，并增加了对高速公路驾驶判断力的考查。由于最新政策的简化，许多人说不再考 G2 的内容了。然而只是省略了停车等项目而已，一切在 local 的驾驶都是考点。</p><h2 id="报名和考试流程"><a href="#报名和考试流程" class="headerlink" title="报名和考试流程"></a>报名和考试流程</h2><p>G1 的报名流程相当简单，只需告知前台您想要考G1。工作人员检查您的证件后，将帮助您完成注册。如果您有以前的驾驶证明文件，也需要一同出示。至于是缩短 G2 等待期还是免考 G2，由工作人员决定。首先进行视力检查，然后直接进行机考。如果通过，可以当场预约 G2 并享有折扣，也可以回家好好练习后再决定考试时间。</p><p>所有的路考流程都是一样的，首先在 <a href="http://drivetest.ca/">drivetest.ca</a> 网站或前台进行预约。考试时只需要携带 G1 或G2 驾照。到达后在电脑上输入驾照号码、车牌、车辆颜色和生产厂商名称，然后拿到号码后回到车上等待考官。考官在上车前会确认您的资料，检查车辆的灯光、刹车和喇叭。上车后，考官会阅读考试注意事项，然后说一句“Let’s go!”，紧张而又刺激的旅程就开始了。</p><h3 id="考试步骤"><a href="#考试步骤" class="headerlink" title="考试步骤"></a>考试步骤</h3><p>无论 G2 和 G考试都大约只需要20分钟。如前所述，G2 考查在城市道路中的驾驶能力。车辆慢慢驶出考场后，在城市道路上进行一两次变线，然后进入小区。完成小区测试后，就是驶回考场，直接得出成绩。G 也是一样。如果通过，您可以直接在前台领取临时驾照。所有的考官都是经验丰富的专业司机，考试的各个环节都有记录。无论合格与否，您都可以在考官下车前与他们交流，他们会提供建议。考试记录也可以在 drivetest 网站上下载。我认为不存在考官歧视或故意刁难的情况，甚至有人说考官不专业是因为他们是新手，给的指示不清楚等。算了吧，考官们也只是上班族，对考点名声的不利影响也可能会影响他们的收入，他们又何必为难大家呢？</p><h3 id="在哪里考-Full-G"><a href="#在哪里考-Full-G" class="headerlink" title="在哪里考 Full G?"></a>在哪里考 Full G?</h3><p>先说说我的成绩。除了上了一节（外国人的）G2 驾驶课外，我并没有再找教练。其实我没有特别的技巧，甚至在 G 考试刚开始的右转时冲过了黄灯。不过后续的操作都非常准确，最终我还是成功通过了考试。我的经验是，实际上高速并不可怕，毕竟大家都珍惜生命。只要提前打灯并给出提醒，一般后面的司机也会减速让你通过。特别是在 ramp 合并时，我相信在最右边的车道的司机会提前注意到有车要并入并采取避让措施。所以这个时候一定要加速，等机会合适就切过去。很多人在合并时害怕与后面的车辆相撞而减速甚至停下来，这反而增加了危险。</p><p>选择在哪里考 G 因人而异。有些人害怕大城市的交通流量大，因此选择在小镇考试。我选择直接在 Don Valley Pkwy 和 401 高速附近的考场，我认为小镇虽然车辆较少，但考官们知道大家来这里可能是因为驾驶技能不太熟练，因此要求可能更严格，灰色区域也更少。想一想，在 80km&#x2F;h 且没有车流的高速上开车只是应付过关，你能确定之后在车流密集的 110km&#x2F;h 高速上能够大胆安全地行驶吗？Oh, boy！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canada </tag>
            
            <tag> Life </tag>
            
            <tag> Ontario </tag>
            
            <tag> driving </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First Dose Covid Vaccine</title>
      <link href="/08-24-2021/first-doze-covid-vaccine/"/>
      <url>/08-24-2021/first-doze-covid-vaccine/</url>
      
        <content type="html"><![CDATA[<p>想不到没有 BC 的医保，但在 BC 预约疫苗完全没有障碍。预约前系统会直接生成一个 Health Card Number（没有实体卡不能看病）。有了这个号码就能像普通 BC 省民一样预约各种各样的免费疫苗。</p><p>我选择了在 Vancouver Convention Centre 接种。抵达时先消毒手，工作人员会要求访客更换口罩，然后用预约号核对姓名和出生日期就可以去打针了。整个 hall 有大约超过 40 位药剂师服务大众，场面甚是壮观。过程跟普通的疫苗一样–mosquito bite！有人说打后很快就会有反应，我还特意坐了好久好久。看着没有什么意，在附近逛了一圈就回家了。</p><p>晚上时，手臂的确开始痛但并没大碍，还特意煮了碗自己最爱的「葱鸡汤」补补“精氣神”。第二天醒来也不见得有特别的感觉！Nice，疫苗认证中老年人！🤣</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canada </tag>
            
            <tag> Covid </tag>
            
            <tag> Life </tag>
            
            <tag> Vancouver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十四日 @ Vancouver</title>
      <link href="/08-22-2021/the-14th-day-in-vancouver/"/>
      <url>/08-22-2021/the-14th-day-in-vancouver/</url>
      
        <content type="html"><![CDATA[<p>不知不觉就这样过了 14 天。独自在空荡荡的家中是什么样的感觉？是无奈又有一点无聊。</p><p>毕竟 Vancouver 是个大城市，要是在萨村估计我早早已经溜出门玩了。无奈之举就是乖乖地在家以防有人上门抽查！再说说无聊，家里的网早就停了，还好手机是无限流量不过不能使用热点，所有只能靠手机上网了。虽然提前已经下载好一些视频，但因为 jet lag，坐着坐着又想睡觉了。就这样，一天浑浑噩噩就过去了。唯一的乐趣就是做晚饭，尽量做点好吃的奖励自己。感恩的就是现在网速的提升，随时可以视频联络；想想以前在美国，每天也只能是语音与家人聊天，想见面唯为忍受着网络卡顿。</p><p>因为明天就是“刑期”结束，是时候要盘算一下去哪里打疫苗，去哪里逛逛，顺便想想有哪些物件要寄去萨村。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canada </tag>
            
            <tag> Covid </tag>
            
            <tag> Life </tag>
            
            <tag> Vancouver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Home Far From Home</title>
      <link href="/08-09-2021/new-home-far-from-home/"/>
      <url>/08-09-2021/new-home-far-from-home/</url>
      
        <content type="html"><![CDATA[<p>运气还是有一点点，就是加国宣布在我入境当天凌晨取消了头 3 天的强制酒店隔离。于是放弃了出发前订酒店的念头（其实很多酒店已经不再接受预订，我以为是 overbooking 了）。但入境时，官员还问我为什么没有订酒店，我理直气壮地说：“现在是 8 月 9 日凌晨 1 点，政府已经取消酒店隔离。” 然后，就放我走了。</p><p>接下来的一切都蛮顺利了，到了家与家里人通了电话报了平安。已经顾不上时差倒头就睡。明天要干嘛？不要忘了在 ArriveCan 打卡。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canada </tag>
            
            <tag> Covid </tag>
            
            <tag> Life </tag>
            
            <tag> Vancouver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨平台同步VS Code 插件和配置</title>
      <link href="/05-01-2020/sync-vscode-for-multiplatform/"/>
      <url>/05-01-2020/sync-vscode-for-multiplatform/</url>
      
        <content type="html"><![CDATA[<p>没有云备份的应用，一般都是使用网盘之类的服务，但单单只是为了一两个配置就有点麻烦，而且配置文件多数是和应用的其它文件放在一起，那就要先导出配置文件，同步后再导入。作为懒惰的老码农，当然希望是有更便捷的方法。拜访古狗大神之后，找到setting sync 这个插件。使用 gist 作为保存配置的它，的确比其它办法方便。</p><h2 id="两个方法的关联-github"><a href="#两个方法的关联-github" class="headerlink" title="两个方法的关联 github"></a>两个方法的关联 github</h2><h4 id="1-先在-github-创建一个-public-或-secret-gist"><a href="#1-先在-github-创建一个-public-或-secret-gist" class="headerlink" title="1. 先在 github 创建一个 public 或 secret gist"></a>1. 先在 github 创建一个 public 或 secret gist</h4><p>public gist 可以让你的团队共同分享一个配置，而secret gist 当然就是只有你自己可以访问的配置了。</p><h4 id="2-安装-Setting-Sync-插件"><a href="#2-安装-Setting-Sync-插件" class="headerlink" title="2. 安装 Setting Sync 插件"></a>2. 安装 Setting Sync 插件</h4><p><img src="https://i.loli.net/2020/05/01/jL72WJ1cIRFNdyO.png" alt="安装" title="Install Setting Sync"></p><h4 id="3-关联-github"><a href="#3-关联-github" class="headerlink" title="3. 关联 github"></a>3. 关联 github</h4><p><img src="https://i.loli.net/2020/05/01/vOIakKGN6oY4B2e.png" alt="登录 github" title="Login github"><br>这是一种选择，好处是不用去 Developer Setting 页面创建 token，因为 token 一旦创建就要保存下来，以后就不能再看到了。</p><p>当登录后，页面会列出 gist，选择一个作为保存配置的即可。<br>再使用</p><blockquote><p>sync: update&#x2F;upload extensions<br>sync: download extensions</p></blockquote><p>就可以在不同的平台上同步了。</p>]]></content>
      
      
      <categories>
          
          <category> 科技与技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 VS Code 配置 Github SSH 及踩过的坑</title>
      <link href="/04-03-2020/config-vscode-using-github-with-ssh/"/>
      <url>/04-03-2020/config-vscode-using-github-with-ssh/</url>
      
        <content type="html"><![CDATA[<p>还是个码农和比较 geek 的时候，一直是用 SourceTree 来 push 代码（包括这是 blog 的文章）。后来荒废了，最近又要重操旧业，决定一切都迁移到VS Code，连 SourceTree 都省了。但 Code 的最大问题是 Push 的时候总是要问用户名和密码，于是就转到 SSH 省点心。</p><h2 id="生成-SSH-Key"><a href="#生成-SSH-Key" class="headerlink" title="生成 SSH Key"></a>生成 SSH Key</h2><p>一、 在 macOS 下的 terminal 里使用 ssh-keygen 生在公钥和私钥文件，  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&#x27;github的邮箱&#x27;</span></span><br></pre></td></tr></table></figure><p>二、接着，命令会询问文件存放的位置和是否带密码， 直接无视就好了，  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):    </span><br><span class="line">Enter same passphrase again:    </span><br></pre></td></tr></table></figure><p>三、看到以下就内容就生成好了，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---[RSA 4096]----+</span><br><span class="line">|.oo=             |</span><br><span class="line">|o.=..   ..       |</span><br><span class="line">|.o .o  o+.       |</span><br><span class="line">|. .  =++...      |</span><br><span class="line">|.    .B.S+ .     |</span><br><span class="line">| .     Bo.o..    |</span><br><span class="line">|..  . +..=o.o    |</span><br><span class="line">|+. . . .= o*.    |</span><br><span class="line">|ooo   .. ...Eo   |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>四、将 id_rsa.pub 内容复制到 github 账号的 setting 下，   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`pbcopy &lt; ~/.ssh/id_rsa.pub`</span><br></pre></td></tr></table></figure><p>五、一切搞好就之后，就是紧张的刺激的踩坑环节！   </p><h2 id="挖坑复挖坑，坑坑何其多"><a href="#挖坑复挖坑，坑坑何其多" class="headerlink" title="挖坑复挖坑，坑坑何其多"></a>挖坑复挖坑，坑坑何其多</h2><p>按常理，添加 ssh key 之后，使用 ssh-agent 就可以把私钥和公钥文件拿走，但添加 ssh-agent 时出现了以下内容：</p><blockquote><p>Permissions 0644 for ‘id_rsa’ are too open.</p><p>It is required that your private key files are NOT accessible by others.</p><p>This private key will be ignored.</p></blockquote><p>What the hell! </p><p>文件权限太高也是罪。只能将权限降到 600，<code>ssh -T git@github.com</code> 一切顺利。</p><h3 id="用-Visual-Studio-Code-拉取代码"><a href="#用-Visual-Studio-Code-拉取代码" class="headerlink" title="用 Visual Studio Code 拉取代码"></a>用 Visual Studio Code 拉取代码</h3><p>现在，我们的 github 已经可以通过 ssh 进行各种操作，自以为在 VS Code 内也可以顺利之际，</p><blockquote><p>Git Error: Permission Denied</p></blockquote><p>某种族人问号(??)，原来 VS Code 根本不支持 ssh-agent，怎办呢？</p><p>还好，Microsoft 这点上想得挺周到的，做了个叫 Remote Development 的 扩展，就是图中（我懒、省空间，图片是我“借”别人的）的这个，</p><p><img src="https://i.loli.net/2020/04/06/oqNJwMRWcpSnmd9.png" alt="扩展" title="Remote SSH"></p><p>装完之后，打开配置文件，把以下的都弄进去。完美！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User github的username</span><br><span class="line">  IdentityFile /Users/you/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/04/03/agOFvzXVyH39QcN.png" alt="配置" title="Configuration"></p><p>以上搞好以后，就可能愉快地使用 VS Code 管理代码了。是不是发现问题了？对的，就是如果不是想在 terminal 里面使用 git，那 ssh-agent 的意义根本就没有！！！</p>]]></content>
      
      
      <categories>
          
          <category> 科技与技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> github </tag>
            
            <tag> macOS </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天猫魔盒亮灯黑屏TTL救砖记</title>
      <link href="/02-06-2018/unbricked-tmb100a-via-ttl/"/>
      <url>/02-06-2018/unbricked-tmb100a-via-ttl/</url>
      
        <content type="html"><![CDATA[<p>最近在小米电视3装了 Kodi 1.7后，想着也在一直掉角落没用过的TMB100A上装装看。可惜天猫魔盒1的ROMs都是基于Android 4.2，只能装 Kodi 1.6 但python库又对新addons不友善。后来看到有大神在盒上安装 Lakka，或者 LibreELEC，所以也试着安装一下。</p><p><strong>（利申：笔者非硬件派，对于AML CPU整个系统的启动机制、命令并不熟悉。纯属按网文及自己研究）</strong></p><p>一开始是用wetek的Lakka ROM去安装，估计缺了文件。短接后一直黑屏没亮灯。之后刷的是<a href="https://forum.libreelec.tv/thread/4858-8-0-2-libreelec-8-0-builds-for-mx2-g18/">LibreELEC</a>，按post介绍用ext3，短接没反应；改回了SDMaker重制了一次，变成不断重进REC刷ROM。粗暴断电后再开，就变成亮灯黑屏了。用了原厂firm和CTK-REC，能进。但刷完还是黑屏。遍历Google，这情况应该是NAND有坏区。无奈之下还是在淘宝买了一条PL2303。要留意的是，国产的PL2303在Windows 10下必须是用2009的旧版driver。原因大家懂。 </p><p>通过putty连接后终于看到网上各位大神说的界面，输入<code>nand bad</code>和<code>nand scrub_safe</code>应该就可以了。 可怜笔者的盒子还是一样。就在这时，putty的界面再没有输出，重连几次也是一样，正当怀疑人生之际，原来TTL线松了……花了点时间重新接上，再次执行了命令。哈，终于成功了。见到熟悉的病猫钓鱼画面。</p><h6 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h6><p>其实TTL本来早该买了，此前试过把netgear变砖很多教程都说要TTL来救。后来用nprmflash能远程救砖就没买了。这次也是想着试一下远程IP刷盒，一直在尝试浪费不少时间。</p>]]></content>
      
      
      <categories>
          
          <category> 科技与技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmall box </tag>
            
            <tag> TMB100A </tag>
            
            <tag> TTL </tag>
            
            <tag> kodi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netgear R6250的固件果然还是DD-WRT最相配</title>
      <link href="/01-21-2018/ddwrt-is-a-good-friend-of-r6250/"/>
      <url>/01-21-2018/ddwrt-is-a-good-friend-of-r6250/</url>
      
        <content type="html"><![CDATA[<p>koolshare团队的确是大牛，在advanced tomato的基础上加入了梅林的软件中心，令操作某些插件的确很方便。就这样入坑了。目前koolshare团队编译的<a href="http://koolshare.cn/thread-98787-1-1.html">固件</a>基于3.4-138，是挺不错的版本。</p><p>从DD-WRT安装到Tomato其实很简单，但笔者的经历可以用坎坷来形容。但作为一名中期懒癌伸手党，有些问题就懒得注册了去报，自己先记着。待有缘人看到再说吧，</p><ol><li><p>下载固件 — 这小机率的事情也让给遇上了；下好了包准备开刷，等等，为什么包名是EA6700的？再下一次，下对了。R6250的！难道楼主发现放错了重新上传？于是仔细观察下，原来自xiaomi-R1DX以下的链接，型号和版本号中间的破折号“-”，它们的链接都是EA6700的链接，两边倒是对的……这也能碰上，注定接下来的周末就这样被废掉。</p></li><li><p>刷机 — 问过谷歌大神，DD-WRT可以直刷，清nvram，刷后30-30-30就能用了。对吧，很简单吧？ 可是操作完变砖了。考虑到是不是DD-WRT的版本太旧，于是用nmrpflash救砖升到最新版，再来一遍……又砖了，无限重启。实在没办法了，想想可能还是从原厂刷入比较妥，于是重来一遍。从原厂到过渡固件一切正常，最后一步……双砖了。如是者从晚上8点到凌晨1点，来来回回把固件、nvram、硬重置弄了不下数十遍，仍然不成功。</p><p>翌日，再试了好几遍还是不成功，可能睡好一觉思维清晰了不少。看看怎样逐一排查问题，第一件就是把外挂硬盘拔了。这一拔果真不得了，竟然启动成功提示输入帐号密码。不过，帐号竟然不是admin&#x2F;admin，试了一千种可能包括网上说的。依然不行，又只能重刷了。一次成功，应该是ext[234]的驱动有问题，把硬盘换到NTFS就好了。</p></li><li><p>DLNA — 能硬盘，当然是把BT和DLNA开上，变成视频中心。因为tomato里nvram保存的ms_dirs是”&#x2F;mnt&lt;”，所以这是无法在网页上修改它的路径，还一时手欠把这默认目录给删了后再也不能重新添加，唯一的办法就是重置。然后再也不敢乱改了。</p></li><li><p>aria2 &amp; aria2ui — 软件中心的aria2能设置的选项太少了，装了aria2ui后发现改过的设置每次重启或者过了一会儿就会变成默认值，不过对tomato没有太多的了解也不知道在哪里修改配置文件。也就放弃了，将就着用。</p></li><li><p>USE支持 — 这也是要吐槽的一项，因为硬盘的挂载在不知不觉间就会sda-&gt;sdb-&gt;sdc这样切换，设置好的ftp路径，DLNA路径变会无效了。但因为ext驱动的原因，又不能对ntfs格式添加label，于是又无解了。</p></li><li><p>WIFI — WIFI信号太弱应该是下狠心换回DD-WRT的诱因。无论改国家到新加坡、扫描一个没人用的频道、把功率加大，又或者把频宽从80 Mhz改到40 Mhz。曾经能连上WIFI的角落一直扫不出信号。运行一周后，就连能连的2.4G也变得无力，连上后也只能3Mbps, RSI 99 dBm。连最后的昏招，不隐藏SSID试了一点改善也没有。</p></li></ol><p>写到这里并不是说advanced tomato有多不好，可能只是在R6250上表现不佳，毕竟这款路由也是奇葩（当初贪便宜买的）。但目前种种体验倒是令人怀念起DD-WRT（只要不是装了$$，dnsmasq会自杀），保证跑上个把月不是问题。就这样，又回归到DD-WRT的怀抱，希望迟一点能看到DD-WRT也有自己的软件中心，那这样切换$$节点和规则就轻松多了。</p>]]></content>
      
      
      <categories>
          
          <category> 科技与技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netgear </tag>
            
            <tag> router </tag>
            
            <tag> firmware </tag>
            
            <tag> dd-wrt </tag>
            
            <tag> tomato </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云端笔记里的“笔记本”与“标签”</title>
      <link href="/01-17-2018/notebooks-and-tags-of-cloud-notes/"/>
      <url>/01-17-2018/notebooks-and-tags-of-cloud-notes/</url>
      
        <content type="html"><![CDATA[<p>最近有朋友发圈，说要好好整理一下印象笔记。她有着600篇笔记，28个笔记本。这就让我想起了刚开始用evernote的情景。云端笔记能随意创建笔记本，想必很多初次接触的笔记术的朋友会烦恼怎样管理越来越多的笔记本和笔记的归属。这个笔记应该是放在A笔记本吗？但它又涉及了B的内容呢，到底是放A还是B？要是还涉及点C笔记本的呢？</p><p>直到读了《弘兼宪史教你活用记事本》里的一段<code>一天二十四小時，人生屬於自己--不要將公事和私事分開</code>才恍然大悟。管你什么读书的、学习的、工作的、旅行的，建一个<code>Notes@年份</code>的笔记本通通都放到里面去。这时候标签就能大显身手，evernote支持100,000个标签，数量足够用上一辈子了吧。</p><p>Evernote作为笔者的KPM工具，笔记本的数量（不算上已经归档的）控制在10个以内。主要的会是几个，</p><p><strong>Inbox</strong> — 一切随意的笔记，文摘，或者收集的资料都先存放在这里，待有空整理后再移走。</p><p><strong>Thing To Do</strong> — 这是一个Notebook Stack，如果遇上需要花不少时间收集整理的事情，笔者会单独在这个stack里建一个专项笔记本，直至完成。例如准备去旅行，从出发到回来写上游记。整理好后打上标签再移走。</p><p><strong>Notes@20XX</strong> — 这是一年整年的笔记，所以从<strong>Inbox</strong>和<strong>Thing To Do</strong>的完成的笔记就会移到这里。一年过后再新建一个。</p><p>前文说到的标签，因为一篇笔记能使用多个标签，聪明的你应该明白怎样使用。如果在出差的时候顺便游玩了某个地方，那这属于工作的笔记本还是旅行的笔记本呢？但是用标签行了。</p><p>完成一件事有一千种方法，找到自己合适的工具，合适的流程才是最重要的。网上也有很多“笔记本”与“标签”配合使用的文章，或者你能从中找到更合用的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 生产力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> evernote </tag>
            
            <tag> noting </tag>
            
            <tag> 弘兼宪史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Evernote, Google Calendar记录子弹笔记</title>
      <link href="/01-05-2018/evernote-google-calendar-as-boju/"/>
      <url>/01-05-2018/evernote-google-calendar-as-boju/</url>
      
        <content type="html"><![CDATA[<p>开始了解boju应该是2017年2月的时候，看完<a href="www.playpcesor.com/2016/12/2017-bullet-journal-evernote.html">esor</a>的几篇子弹笔记相关的博文后，也看了<a href="www.bulletjournal.com">官网</a>的视频就模仿着在用。</p><p>子弹笔记主要通过四部份，“Index”、“Future Log”、“Monthly Log”、“Daily Log”组成。Index是将写有重要事件的日记页的页数记录下来，方便索引；Future Log按月份划分，记下有什么希望在某天某月完成的合集；Monthly Log包括日历和任务列表，可以视为整月的行事历；最后的Daily Log就大家规划每天行程工作的地方。  </p><h2 id="我的子弹笔记的改进"><a href="#我的子弹笔记的改进" class="headerlink" title="我的子弹笔记的改进"></a>我的子弹笔记的改进</h2><p>刚开始的时候，处女座的纠结症又犯了。 一直在纠结几个部份好像有重叠，明明在Future Log写了几月几日想做什么、谁人生日，然后到Monthly Log又要再写一篇；在Daily Log发生的事，在Monthly Log写了一遍，然后又要去Index又要再写；还有Google Calendar早就记下大家的生日，难道还要再在笔记里再写一篇？</p><p>所以我的子弹笔记做了一些调整，首先从Daily Log做起，在Evernote创建一个一周的笔记，将一周内Daily Log都写在里面，这样Daily Log就不会分得太散；其次是就放弃Monthly Log，直接用Google Calendar作为Monthly Log使用，这样就减少了重叠。</p><p>再来就是Future Log，Future Log不再是写着某天完成什么，而是写下某个月想完成的目标，例如想在11月参加一个资格考试，12月要看完某本书之类；工作的、家里的、学习的都行。</p><h2 id="Evernote-or-手帐？"><a href="#Evernote-or-手帐？" class="headerlink" title="Evernote or 手帐？"></a>Evernote or 手帐？</h2><p>看着“你管子”上花花绿绿附上各种手绘的漂亮手帐，虽然我也会用方格本，但作为一名不解风情的铁汉，近年又逐渐使用evernote多过笔记本，对于我来说evernote更加合适。当然要是喜欢每年都回味一下垒得高高的笔记本。那就用吧，顺手就好。</p>]]></content>
      
      
      <categories>
          
          <category> 生产力 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> evernote </tag>
            
            <tag> GTD </tag>
            
            <tag> bullet journal </tag>
            
            <tag> google </tag>
            
            <tag> google calendar </tag>
            
            <tag> time boxing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关注写作就好，把Hexo部署交给Travis CI</title>
      <link href="/12-12-2017/deploy-hexo-by-travis-ci/"/>
      <url>/12-12-2017/deploy-hexo-by-travis-ci/</url>
      
        <content type="html"><![CDATA[<p>曾经断断续续地在各类博客网站写过日记，可是倒闭的倒闭，被封的被封，要么就是主题太丑操作不便。直至遇上了github page + Jekyll，不过还要自己改template又要每次都要本地编译部署，写着写着又放弃了。后来在研究Travis CI，偶然发现不少大牛都在使用它来部署github page，于是再次入坑。</p><p>Travis CI跟Jenkins一样，都是持续集成的工具。但对于个人开发者来说，毕竟Jenkins太重了，要不是为了研究Jenkins，才不会为自己的开源项目搭一个Jenkins，对吧？Travis CI的Free for Open Source的确帮了不少忙。</p><p>在Travis关联好github帐号、Repo和Branch。在项目根目录下加上_**.travis.yml**_文件，当有push时，Travis就会按配置文件进行一系列的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line"></span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">    apt: true</span><br><span class="line">    directories:</span><br><span class="line">        \- node_modules</span><br><span class="line">before_install:</span><br><span class="line">  \- npm install -g hexo</span><br><span class="line">  \- npm install -g hexo-cli</span><br><span class="line">install:</span><br><span class="line">  \- npm install</span><br><span class="line">script:</span><br><span class="line">    \- hexo cl</span><br><span class="line">    \- hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  \- cd ./public</span><br><span class="line">  \- git init</span><br><span class="line">  \- git config user.name &quot;kenmjlee&quot;</span><br><span class="line">  \- git config user.email &quot;kenneth.mj.lee@gmail.com&quot;</span><br><span class="line">  \- git add .</span><br><span class="line">  \- git commit -m &quot;Travis CI Auto Builder at `date +&quot;%Y-%m-%d %H:%M&quot;`&quot;</span><br><span class="line">  \- git push --force --quiet &quot;https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">    only:</span><br><span class="line">        \- source</span><br><span class="line">env:</span><br><span class="line">    global:</span><br><span class="line">        \- GH_REF: github.com/kenmjlee/kenmjlee.github.io.git</span><br></pre></td></tr></table></figure><p>网上不少朋友说因为GH_Token会明文保存，需要通过加密。其实Travis已经支持在配置页上添加Environment Variables。<img src="/uploads/travis-ci-setting-environment-variables.png" alt="Setting Page"></p><p>配置好以后，安心写作。剩下的关由Travis去管吧。</p>]]></content>
      
      
      <categories>
          
          <category> 科技与技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TravisCI </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
